// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	resize "controller/internal/resize"

	mock "github.com/stretchr/testify/mock"

	specs "controller/internal/specs"
)

// Resizer is an autogenerated mock type for the Resizer type
type Resizer struct {
	mock.Mock
}

type Resizer_Expecter struct {
	mock *mock.Mock
}

func (_m *Resizer) EXPECT() *Resizer_Expecter {
	return &Resizer_Expecter{mock: &_m.Mock}
}

// AddWorkers provides a mock function with given fields: _a0
func (_m *Resizer) AddWorkers(_a0 []specs.WorkerInfo) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for AddWorkers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]specs.WorkerInfo) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Resizer_AddWorkers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddWorkers'
type Resizer_AddWorkers_Call struct {
	*mock.Call
}

// AddWorkers is a helper method to define mock.On call
//   - _a0 []specs.WorkerInfo
func (_e *Resizer_Expecter) AddWorkers(_a0 interface{}) *Resizer_AddWorkers_Call {
	return &Resizer_AddWorkers_Call{Call: _e.mock.On("AddWorkers", _a0)}
}

func (_c *Resizer_AddWorkers_Call) Run(run func(_a0 []specs.WorkerInfo)) *Resizer_AddWorkers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]specs.WorkerInfo))
	})
	return _c
}

func (_c *Resizer_AddWorkers_Call) Return(_a0 error) *Resizer_AddWorkers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Resizer_AddWorkers_Call) RunAndReturn(run func([]specs.WorkerInfo) error) *Resizer_AddWorkers_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteWorkers provides a mock function with given fields: _a0
func (_m *Resizer) DeleteWorkers(_a0 []string) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWorkers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Resizer_DeleteWorkers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteWorkers'
type Resizer_DeleteWorkers_Call struct {
	*mock.Call
}

// DeleteWorkers is a helper method to define mock.On call
//   - _a0 []string
func (_e *Resizer_Expecter) DeleteWorkers(_a0 interface{}) *Resizer_DeleteWorkers_Call {
	return &Resizer_DeleteWorkers_Call{Call: _e.mock.On("DeleteWorkers", _a0)}
}

func (_c *Resizer_DeleteWorkers_Call) Run(run func(_a0 []string)) *Resizer_DeleteWorkers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *Resizer_DeleteWorkers_Call) Return(_a0 error) *Resizer_DeleteWorkers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Resizer_DeleteWorkers_Call) RunAndReturn(run func([]string) error) *Resizer_DeleteWorkers_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkers provides a mock function with given fields:
func (_m *Resizer) GetWorkers() ([]resize.Worker, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetWorkers")
	}

	var r0 []resize.Worker
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]resize.Worker, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []resize.Worker); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]resize.Worker)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Resizer_GetWorkers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkers'
type Resizer_GetWorkers_Call struct {
	*mock.Call
}

// GetWorkers is a helper method to define mock.On call
func (_e *Resizer_Expecter) GetWorkers() *Resizer_GetWorkers_Call {
	return &Resizer_GetWorkers_Call{Call: _e.mock.On("GetWorkers")}
}

func (_c *Resizer_GetWorkers_Call) Run(run func()) *Resizer_GetWorkers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Resizer_GetWorkers_Call) Return(_a0 []resize.Worker, _a1 error) *Resizer_GetWorkers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Resizer_GetWorkers_Call) RunAndReturn(run func() ([]resize.Worker, error)) *Resizer_GetWorkers_Call {
	_c.Call.Return(run)
	return _c
}

// NewResizer creates a new instance of Resizer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewResizer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Resizer {
	mock := &Resizer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
