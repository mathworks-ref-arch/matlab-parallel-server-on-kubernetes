// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	bytes "bytes"

	corev1 "k8s.io/api/core/v1"

	mock "github.com/stretchr/testify/mock"

	types "k8s.io/apimachinery/pkg/types"

	v1 "k8s.io/api/apps/v1"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// CreateDeployment provides a mock function with given fields: _a0
func (_m *Client) CreateDeployment(_a0 *v1.Deployment) (*v1.Deployment, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateDeployment")
	}

	var r0 *v1.Deployment
	var r1 error
	if rf, ok := ret.Get(0).(func(*v1.Deployment) (*v1.Deployment, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*v1.Deployment) *v1.Deployment); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Deployment)
		}
	}

	if rf, ok := ret.Get(1).(func(*v1.Deployment) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_CreateDeployment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDeployment'
type Client_CreateDeployment_Call struct {
	*mock.Call
}

// CreateDeployment is a helper method to define mock.On call
//   - _a0 *v1.Deployment
func (_e *Client_Expecter) CreateDeployment(_a0 interface{}) *Client_CreateDeployment_Call {
	return &Client_CreateDeployment_Call{Call: _e.mock.On("CreateDeployment", _a0)}
}

func (_c *Client_CreateDeployment_Call) Run(run func(_a0 *v1.Deployment)) *Client_CreateDeployment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*v1.Deployment))
	})
	return _c
}

func (_c *Client_CreateDeployment_Call) Return(_a0 *v1.Deployment, _a1 error) *Client_CreateDeployment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_CreateDeployment_Call) RunAndReturn(run func(*v1.Deployment) (*v1.Deployment, error)) *Client_CreateDeployment_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSecret provides a mock function with given fields: _a0
func (_m *Client) CreateSecret(_a0 *corev1.Secret) (*corev1.Secret, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateSecret")
	}

	var r0 *corev1.Secret
	var r1 error
	if rf, ok := ret.Get(0).(func(*corev1.Secret) (*corev1.Secret, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*corev1.Secret) *corev1.Secret); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.Secret)
		}
	}

	if rf, ok := ret.Get(1).(func(*corev1.Secret) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_CreateSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSecret'
type Client_CreateSecret_Call struct {
	*mock.Call
}

// CreateSecret is a helper method to define mock.On call
//   - _a0 *corev1.Secret
func (_e *Client_Expecter) CreateSecret(_a0 interface{}) *Client_CreateSecret_Call {
	return &Client_CreateSecret_Call{Call: _e.mock.On("CreateSecret", _a0)}
}

func (_c *Client_CreateSecret_Call) Run(run func(_a0 *corev1.Secret)) *Client_CreateSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*corev1.Secret))
	})
	return _c
}

func (_c *Client_CreateSecret_Call) Return(_a0 *corev1.Secret, _a1 error) *Client_CreateSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_CreateSecret_Call) RunAndReturn(run func(*corev1.Secret) (*corev1.Secret, error)) *Client_CreateSecret_Call {
	_c.Call.Return(run)
	return _c
}

// CreateService provides a mock function with given fields: _a0
func (_m *Client) CreateService(_a0 *corev1.Service) (*corev1.Service, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateService")
	}

	var r0 *corev1.Service
	var r1 error
	if rf, ok := ret.Get(0).(func(*corev1.Service) (*corev1.Service, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*corev1.Service) *corev1.Service); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.Service)
		}
	}

	if rf, ok := ret.Get(1).(func(*corev1.Service) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_CreateService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateService'
type Client_CreateService_Call struct {
	*mock.Call
}

// CreateService is a helper method to define mock.On call
//   - _a0 *corev1.Service
func (_e *Client_Expecter) CreateService(_a0 interface{}) *Client_CreateService_Call {
	return &Client_CreateService_Call{Call: _e.mock.On("CreateService", _a0)}
}

func (_c *Client_CreateService_Call) Run(run func(_a0 *corev1.Service)) *Client_CreateService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*corev1.Service))
	})
	return _c
}

func (_c *Client_CreateService_Call) Return(_a0 *corev1.Service, _a1 error) *Client_CreateService_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_CreateService_Call) RunAndReturn(run func(*corev1.Service) (*corev1.Service, error)) *Client_CreateService_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDeployment provides a mock function with given fields: _a0
func (_m *Client) DeleteDeployment(_a0 string) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDeployment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_DeleteDeployment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDeployment'
type Client_DeleteDeployment_Call struct {
	*mock.Call
}

// DeleteDeployment is a helper method to define mock.On call
//   - _a0 string
func (_e *Client_Expecter) DeleteDeployment(_a0 interface{}) *Client_DeleteDeployment_Call {
	return &Client_DeleteDeployment_Call{Call: _e.mock.On("DeleteDeployment", _a0)}
}

func (_c *Client_DeleteDeployment_Call) Run(run func(_a0 string)) *Client_DeleteDeployment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Client_DeleteDeployment_Call) Return(_a0 error) *Client_DeleteDeployment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_DeleteDeployment_Call) RunAndReturn(run func(string) error) *Client_DeleteDeployment_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSecret provides a mock function with given fields: _a0
func (_m *Client) DeleteSecret(_a0 string) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSecret")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_DeleteSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSecret'
type Client_DeleteSecret_Call struct {
	*mock.Call
}

// DeleteSecret is a helper method to define mock.On call
//   - _a0 string
func (_e *Client_Expecter) DeleteSecret(_a0 interface{}) *Client_DeleteSecret_Call {
	return &Client_DeleteSecret_Call{Call: _e.mock.On("DeleteSecret", _a0)}
}

func (_c *Client_DeleteSecret_Call) Run(run func(_a0 string)) *Client_DeleteSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Client_DeleteSecret_Call) Return(_a0 error) *Client_DeleteSecret_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_DeleteSecret_Call) RunAndReturn(run func(string) error) *Client_DeleteSecret_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteService provides a mock function with given fields: _a0
func (_m *Client) DeleteService(_a0 string) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteService")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_DeleteService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteService'
type Client_DeleteService_Call struct {
	*mock.Call
}

// DeleteService is a helper method to define mock.On call
//   - _a0 string
func (_e *Client_Expecter) DeleteService(_a0 interface{}) *Client_DeleteService_Call {
	return &Client_DeleteService_Call{Call: _e.mock.On("DeleteService", _a0)}
}

func (_c *Client_DeleteService_Call) Run(run func(_a0 string)) *Client_DeleteService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Client_DeleteService_Call) Return(_a0 error) *Client_DeleteService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_DeleteService_Call) RunAndReturn(run func(string) error) *Client_DeleteService_Call {
	_c.Call.Return(run)
	return _c
}

// DeploymentExists provides a mock function with given fields: _a0
func (_m *Client) DeploymentExists(_a0 string) (bool, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeploymentExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_DeploymentExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeploymentExists'
type Client_DeploymentExists_Call struct {
	*mock.Call
}

// DeploymentExists is a helper method to define mock.On call
//   - _a0 string
func (_e *Client_Expecter) DeploymentExists(_a0 interface{}) *Client_DeploymentExists_Call {
	return &Client_DeploymentExists_Call{Call: _e.mock.On("DeploymentExists", _a0)}
}

func (_c *Client_DeploymentExists_Call) Run(run func(_a0 string)) *Client_DeploymentExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Client_DeploymentExists_Call) Return(_a0 bool, _a1 error) *Client_DeploymentExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_DeploymentExists_Call) RunAndReturn(run func(string) (bool, error)) *Client_DeploymentExists_Call {
	_c.Call.Return(run)
	return _c
}

// ExecOnPod provides a mock function with given fields: _a0, _a1
func (_m *Client) ExecOnPod(_a0 string, _a1 []string) (*bytes.Buffer, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ExecOnPod")
	}

	var r0 *bytes.Buffer
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []string) (*bytes.Buffer, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, []string) *bytes.Buffer); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bytes.Buffer)
		}
	}

	if rf, ok := ret.Get(1).(func(string, []string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_ExecOnPod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecOnPod'
type Client_ExecOnPod_Call struct {
	*mock.Call
}

// ExecOnPod is a helper method to define mock.On call
//   - _a0 string
//   - _a1 []string
func (_e *Client_Expecter) ExecOnPod(_a0 interface{}, _a1 interface{}) *Client_ExecOnPod_Call {
	return &Client_ExecOnPod_Call{Call: _e.mock.On("ExecOnPod", _a0, _a1)}
}

func (_c *Client_ExecOnPod_Call) Run(run func(_a0 string, _a1 []string)) *Client_ExecOnPod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]string))
	})
	return _c
}

func (_c *Client_ExecOnPod_Call) Return(_a0 *bytes.Buffer, _a1 error) *Client_ExecOnPod_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_ExecOnPod_Call) RunAndReturn(run func(string, []string) (*bytes.Buffer, error)) *Client_ExecOnPod_Call {
	_c.Call.Return(run)
	return _c
}

// GetControllerDeploymentUID provides a mock function with given fields:
func (_m *Client) GetControllerDeploymentUID() (types.UID, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetControllerDeploymentUID")
	}

	var r0 types.UID
	var r1 error
	if rf, ok := ret.Get(0).(func() (types.UID, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() types.UID); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(types.UID)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetControllerDeploymentUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetControllerDeploymentUID'
type Client_GetControllerDeploymentUID_Call struct {
	*mock.Call
}

// GetControllerDeploymentUID is a helper method to define mock.On call
func (_e *Client_Expecter) GetControllerDeploymentUID() *Client_GetControllerDeploymentUID_Call {
	return &Client_GetControllerDeploymentUID_Call{Call: _e.mock.On("GetControllerDeploymentUID")}
}

func (_c *Client_GetControllerDeploymentUID_Call) Run(run func()) *Client_GetControllerDeploymentUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_GetControllerDeploymentUID_Call) Return(_a0 types.UID, _a1 error) *Client_GetControllerDeploymentUID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetControllerDeploymentUID_Call) RunAndReturn(run func() (types.UID, error)) *Client_GetControllerDeploymentUID_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeployment provides a mock function with given fields: _a0
func (_m *Client) GetDeployment(_a0 string) (*v1.Deployment, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetDeployment")
	}

	var r0 *v1.Deployment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*v1.Deployment, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *v1.Deployment); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Deployment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetDeployment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeployment'
type Client_GetDeployment_Call struct {
	*mock.Call
}

// GetDeployment is a helper method to define mock.On call
//   - _a0 string
func (_e *Client_Expecter) GetDeployment(_a0 interface{}) *Client_GetDeployment_Call {
	return &Client_GetDeployment_Call{Call: _e.mock.On("GetDeployment", _a0)}
}

func (_c *Client_GetDeployment_Call) Run(run func(_a0 string)) *Client_GetDeployment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Client_GetDeployment_Call) Return(_a0 *v1.Deployment, _a1 error) *Client_GetDeployment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetDeployment_Call) RunAndReturn(run func(string) (*v1.Deployment, error)) *Client_GetDeployment_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeploymentsWithLabel provides a mock function with given fields: _a0
func (_m *Client) GetDeploymentsWithLabel(_a0 string) (*v1.DeploymentList, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetDeploymentsWithLabel")
	}

	var r0 *v1.DeploymentList
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*v1.DeploymentList, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *v1.DeploymentList); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.DeploymentList)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetDeploymentsWithLabel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeploymentsWithLabel'
type Client_GetDeploymentsWithLabel_Call struct {
	*mock.Call
}

// GetDeploymentsWithLabel is a helper method to define mock.On call
//   - _a0 string
func (_e *Client_Expecter) GetDeploymentsWithLabel(_a0 interface{}) *Client_GetDeploymentsWithLabel_Call {
	return &Client_GetDeploymentsWithLabel_Call{Call: _e.mock.On("GetDeploymentsWithLabel", _a0)}
}

func (_c *Client_GetDeploymentsWithLabel_Call) Run(run func(_a0 string)) *Client_GetDeploymentsWithLabel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Client_GetDeploymentsWithLabel_Call) Return(_a0 *v1.DeploymentList, _a1 error) *Client_GetDeploymentsWithLabel_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetDeploymentsWithLabel_Call) RunAndReturn(run func(string) (*v1.DeploymentList, error)) *Client_GetDeploymentsWithLabel_Call {
	_c.Call.Return(run)
	return _c
}

// GetJobManagerPod provides a mock function with given fields:
func (_m *Client) GetJobManagerPod() (*corev1.Pod, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetJobManagerPod")
	}

	var r0 *corev1.Pod
	var r1 error
	if rf, ok := ret.Get(0).(func() (*corev1.Pod, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *corev1.Pod); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.Pod)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetJobManagerPod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJobManagerPod'
type Client_GetJobManagerPod_Call struct {
	*mock.Call
}

// GetJobManagerPod is a helper method to define mock.On call
func (_e *Client_Expecter) GetJobManagerPod() *Client_GetJobManagerPod_Call {
	return &Client_GetJobManagerPod_Call{Call: _e.mock.On("GetJobManagerPod")}
}

func (_c *Client_GetJobManagerPod_Call) Run(run func()) *Client_GetJobManagerPod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_GetJobManagerPod_Call) Return(_a0 *corev1.Pod, _a1 error) *Client_GetJobManagerPod_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetJobManagerPod_Call) RunAndReturn(run func() (*corev1.Pod, error)) *Client_GetJobManagerPod_Call {
	_c.Call.Return(run)
	return _c
}

// GetLoadBalancer provides a mock function with given fields:
func (_m *Client) GetLoadBalancer() (*corev1.Service, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLoadBalancer")
	}

	var r0 *corev1.Service
	var r1 error
	if rf, ok := ret.Get(0).(func() (*corev1.Service, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *corev1.Service); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.Service)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetLoadBalancer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLoadBalancer'
type Client_GetLoadBalancer_Call struct {
	*mock.Call
}

// GetLoadBalancer is a helper method to define mock.On call
func (_e *Client_Expecter) GetLoadBalancer() *Client_GetLoadBalancer_Call {
	return &Client_GetLoadBalancer_Call{Call: _e.mock.On("GetLoadBalancer")}
}

func (_c *Client_GetLoadBalancer_Call) Run(run func()) *Client_GetLoadBalancer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_GetLoadBalancer_Call) Return(_a0 *corev1.Service, _a1 error) *Client_GetLoadBalancer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetLoadBalancer_Call) RunAndReturn(run func() (*corev1.Service, error)) *Client_GetLoadBalancer_Call {
	_c.Call.Return(run)
	return _c
}

// GetPodsWithLabel provides a mock function with given fields: _a0
func (_m *Client) GetPodsWithLabel(_a0 string) (*corev1.PodList, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetPodsWithLabel")
	}

	var r0 *corev1.PodList
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*corev1.PodList, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *corev1.PodList); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.PodList)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetPodsWithLabel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPodsWithLabel'
type Client_GetPodsWithLabel_Call struct {
	*mock.Call
}

// GetPodsWithLabel is a helper method to define mock.On call
//   - _a0 string
func (_e *Client_Expecter) GetPodsWithLabel(_a0 interface{}) *Client_GetPodsWithLabel_Call {
	return &Client_GetPodsWithLabel_Call{Call: _e.mock.On("GetPodsWithLabel", _a0)}
}

func (_c *Client_GetPodsWithLabel_Call) Run(run func(_a0 string)) *Client_GetPodsWithLabel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Client_GetPodsWithLabel_Call) Return(_a0 *corev1.PodList, _a1 error) *Client_GetPodsWithLabel_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetPodsWithLabel_Call) RunAndReturn(run func(string) (*corev1.PodList, error)) *Client_GetPodsWithLabel_Call {
	_c.Call.Return(run)
	return _c
}

// GetSecret provides a mock function with given fields: _a0
func (_m *Client) GetSecret(_a0 string) (*corev1.Secret, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetSecret")
	}

	var r0 *corev1.Secret
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*corev1.Secret, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *corev1.Secret); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.Secret)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSecret'
type Client_GetSecret_Call struct {
	*mock.Call
}

// GetSecret is a helper method to define mock.On call
//   - _a0 string
func (_e *Client_Expecter) GetSecret(_a0 interface{}) *Client_GetSecret_Call {
	return &Client_GetSecret_Call{Call: _e.mock.On("GetSecret", _a0)}
}

func (_c *Client_GetSecret_Call) Run(run func(_a0 string)) *Client_GetSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Client_GetSecret_Call) Return(_a0 *corev1.Secret, _a1 error) *Client_GetSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetSecret_Call) RunAndReturn(run func(string) (*corev1.Secret, error)) *Client_GetSecret_Call {
	_c.Call.Return(run)
	return _c
}

// GetService provides a mock function with given fields: _a0
func (_m *Client) GetService(_a0 string) (*corev1.Service, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetService")
	}

	var r0 *corev1.Service
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*corev1.Service, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *corev1.Service); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.Service)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetService'
type Client_GetService_Call struct {
	*mock.Call
}

// GetService is a helper method to define mock.On call
//   - _a0 string
func (_e *Client_Expecter) GetService(_a0 interface{}) *Client_GetService_Call {
	return &Client_GetService_Call{Call: _e.mock.On("GetService", _a0)}
}

func (_c *Client_GetService_Call) Run(run func(_a0 string)) *Client_GetService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Client_GetService_Call) Return(_a0 *corev1.Service, _a1 error) *Client_GetService_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetService_Call) RunAndReturn(run func(string) (*corev1.Service, error)) *Client_GetService_Call {
	_c.Call.Return(run)
	return _c
}

// GetServicesWithLabel provides a mock function with given fields: _a0
func (_m *Client) GetServicesWithLabel(_a0 string) (*corev1.ServiceList, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetServicesWithLabel")
	}

	var r0 *corev1.ServiceList
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*corev1.ServiceList, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *corev1.ServiceList); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.ServiceList)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetServicesWithLabel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServicesWithLabel'
type Client_GetServicesWithLabel_Call struct {
	*mock.Call
}

// GetServicesWithLabel is a helper method to define mock.On call
//   - _a0 string
func (_e *Client_Expecter) GetServicesWithLabel(_a0 interface{}) *Client_GetServicesWithLabel_Call {
	return &Client_GetServicesWithLabel_Call{Call: _e.mock.On("GetServicesWithLabel", _a0)}
}

func (_c *Client_GetServicesWithLabel_Call) Run(run func(_a0 string)) *Client_GetServicesWithLabel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Client_GetServicesWithLabel_Call) Return(_a0 *corev1.ServiceList, _a1 error) *Client_GetServicesWithLabel_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetServicesWithLabel_Call) RunAndReturn(run func(string) (*corev1.ServiceList, error)) *Client_GetServicesWithLabel_Call {
	_c.Call.Return(run)
	return _c
}

// IsJobManagerReady provides a mock function with given fields:
func (_m *Client) IsJobManagerReady() (bool, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsJobManagerReady")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func() (bool, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_IsJobManagerReady_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsJobManagerReady'
type Client_IsJobManagerReady_Call struct {
	*mock.Call
}

// IsJobManagerReady is a helper method to define mock.On call
func (_e *Client_Expecter) IsJobManagerReady() *Client_IsJobManagerReady_Call {
	return &Client_IsJobManagerReady_Call{Call: _e.mock.On("IsJobManagerReady")}
}

func (_c *Client_IsJobManagerReady_Call) Run(run func()) *Client_IsJobManagerReady_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_IsJobManagerReady_Call) Return(_a0 bool, _a1 error) *Client_IsJobManagerReady_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_IsJobManagerReady_Call) RunAndReturn(run func() (bool, error)) *Client_IsJobManagerReady_Call {
	_c.Call.Return(run)
	return _c
}

// SecretExists provides a mock function with given fields: _a0
func (_m *Client) SecretExists(_a0 string) (*corev1.Secret, bool, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SecretExists")
	}

	var r0 *corev1.Secret
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (*corev1.Secret, bool, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *corev1.Secret); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.Secret)
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(_a0)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Client_SecretExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SecretExists'
type Client_SecretExists_Call struct {
	*mock.Call
}

// SecretExists is a helper method to define mock.On call
//   - _a0 string
func (_e *Client_Expecter) SecretExists(_a0 interface{}) *Client_SecretExists_Call {
	return &Client_SecretExists_Call{Call: _e.mock.On("SecretExists", _a0)}
}

func (_c *Client_SecretExists_Call) Run(run func(_a0 string)) *Client_SecretExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Client_SecretExists_Call) Return(_a0 *corev1.Secret, _a1 bool, _a2 error) *Client_SecretExists_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *Client_SecretExists_Call) RunAndReturn(run func(string) (*corev1.Secret, bool, error)) *Client_SecretExists_Call {
	_c.Call.Return(run)
	return _c
}

// ServiceExists provides a mock function with given fields: _a0
func (_m *Client) ServiceExists(_a0 string) (*corev1.Service, bool, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ServiceExists")
	}

	var r0 *corev1.Service
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (*corev1.Service, bool, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *corev1.Service); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.Service)
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(_a0)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Client_ServiceExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServiceExists'
type Client_ServiceExists_Call struct {
	*mock.Call
}

// ServiceExists is a helper method to define mock.On call
//   - _a0 string
func (_e *Client_Expecter) ServiceExists(_a0 interface{}) *Client_ServiceExists_Call {
	return &Client_ServiceExists_Call{Call: _e.mock.On("ServiceExists", _a0)}
}

func (_c *Client_ServiceExists_Call) Run(run func(_a0 string)) *Client_ServiceExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Client_ServiceExists_Call) Return(_a0 *corev1.Service, _a1 bool, _a2 error) *Client_ServiceExists_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *Client_ServiceExists_Call) RunAndReturn(run func(string) (*corev1.Service, bool, error)) *Client_ServiceExists_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateService provides a mock function with given fields: _a0
func (_m *Client) UpdateService(_a0 *corev1.Service) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateService")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*corev1.Service) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_UpdateService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateService'
type Client_UpdateService_Call struct {
	*mock.Call
}

// UpdateService is a helper method to define mock.On call
//   - _a0 *corev1.Service
func (_e *Client_Expecter) UpdateService(_a0 interface{}) *Client_UpdateService_Call {
	return &Client_UpdateService_Call{Call: _e.mock.On("UpdateService", _a0)}
}

func (_c *Client_UpdateService_Call) Run(run func(_a0 *corev1.Service)) *Client_UpdateService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*corev1.Service))
	})
	return _c
}

func (_c *Client_UpdateService_Call) Return(_a0 error) *Client_UpdateService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_UpdateService_Call) RunAndReturn(run func(*corev1.Service) error) *Client_UpdateService_Call {
	_c.Call.Return(run)
	return _c
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
